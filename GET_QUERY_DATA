*&---------------------------------------------------------------------*
*& Report ZLINO_TEST4
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZRBW_GET_QUERY_DATA_FOR_GRC.

TYPES:BEGIN OF GS_QUERY,
  QUERY TYPE RSZCOMPID,
  END OF GS_QUERY.
TYPES: BEGIN OF GS_TUPLE,
  TUPLE TYPE RSIM_S_TUPLE_VALUE-TUPLE,
  END OF GS_TUPLE,
       BEGIN OF GS_DIR,
         ELTUID TYPE SYSUUID_25,
         MAPNAME TYPE RSZCOMPID,
         TXTLG TYPE RSTXTLG,
         END OF GS_DIR.

DATA:
      LT_QUERY TYPE TABLE OF GS_QUERY,
      LS_QUERY TYPE GS_QUERY,
      LT_DIR TYPE TABLE OF GS_DIR,
      LS_DIR TYPE GS_DIR.
DATA:
      LT_QUERY_INPUT TYPE RSIM_S_QUERY_ELEM,
      "LS_QUERY_INPUT TYPE RSIM_S_QUERY_ELEM,
      LT_CHAR_LIST TYPE  RSIM_T_CHANM,
      LS_CHAR_LIST LIKE LINE OF LT_CHAR_LIST,
      LT_KEY_LIST TYPE  RSIM_T_CHANM,
      LT_CHAR_DATA TYPE RSIM_T_ELEM_OUTPUT,
      LS_CHAR_DATA LIKE LINE OF LT_CHAR_DATA,
      LT_KEY_DATA TYPE RSIM_T_ELEM_OUTPUT,
      LS_KEY_DATA LIKE LINE OF LT_KEY_DATA,
      LT_VALUE TYPE TABLE OF RSIM_S_TUPLE_VALUE,
      LS_VALUE TYPE RSIM_S_TUPLE_VALUE,
      LT_TUPLE TYPE TABLE OF GS_TUPLE,
      LS_TUPLE TYPE GS_TUPLE.
DATA:
      LT_D001 TYPE TABLE OF ZTBW_GRC_DATA,
      LS_D001 TYPE ZTBW_GRC_DATA,
      LT_D005 TYPE TABLE OF ZTBW_GRC_DATA,
      LS_D005 TYPE ZTBW_GRC_DATA,
      LT_FINAL TYPE TABLE OF ZTBW_GRC_DATA,
      LS_FINAL TYPE ZTBW_GRC_DATA.
DATA:
      LV_CHAR(30) TYPE C ,
      LV_DATE(10) TYPE C,
      LV_IOBJ(30) TYPE C .
DATA: S_O_QUERY TYPE RSZCOMPID.

SELECT-OPTIONS: S_QUERY FOR S_O_QUERY NO INTERVALS.

START-OF-SELECTION.

     PERFORM GET_QUERY.
     PERFORM GET_QUERY_INFO.
     PERFORM MODIFY_DB.


FORM GET_QUERY.
      CLEAR:LT_QUERY.
    IF S_QUERY IS INITIAL.
    SELECT DISTINCT QUERY INTO TABLE LT_QUERY FROM ZTBW_QUERY_CONF.
    ELSE.
    SELECT DISTINCT QUERY INTO TABLE LT_QUERY FROM ZTBW_QUERY_CONF WHERE QUERY IN S_QUERY.
    ENDIF.

*    **指标描述
    SELECT A~ELTUID , A~MAPNAME,B~TXTLG
      FROM RSZELTDIR AS A
      LEFT JOIN RSZELTTXT AS B
      ON A~ELTUID = B~ELTUID
      INTO TABLE @LT_DIR
      WHERE A~OBJVERS = 'A'
      AND B~LANGU = '1'.
    SORT LT_DIR BY MAPNAME.
ENDFORM.

FORM GET_QUERY_INFO.

    LOOP AT LT_QUERY INTO LS_QUERY.
      CLEAR: LT_QUERY_INPUT,LT_CHAR_DATA,LT_KEY_DATA.
      LT_QUERY_INPUT-QUERY_NAME = LS_QUERY-QUERY.
*    ***维度清单
      SELECT IOBJNM  FROM ZTBW_QUERY_CONF WHERE QUERY = @LS_QUERY-QUERY AND FLAG = 'DIM' INTO TABLE @LT_CHAR_LIST.
      LT_QUERY_INPUT-CHAR_LIST = LT_CHAR_LIST.
*    ***指标清单
      SELECT IOBJNM  FROM ZTBW_QUERY_CONF WHERE QUERY = @LS_QUERY-QUERY AND FLAG = 'MEM' INTO TABLE @LT_KEY_LIST.
      LT_QUERY_INPUT-KYF_LIST = LT_KEY_LIST.
*    ***取数关键日期
      SELECT SINGLE IOBJNM,KEY_DATE   FROM ZTBW_QUERY_CONF WHERE  QUERY = @LS_QUERY-QUERY AND KEY_DATE IS NOT INITIAL INTO  (@LV_CHAR , @LV_DATE).
*    ***根据QUERY，维度，指标取数
      CALL FUNCTION 'RSIM_READ_QUERY_DATA'
        EXPORTING
          I_QUERY_INPUT           = LT_QUERY_INPUT
*         I_T_PARAMETER            =
       IMPORTING
         E_T_CHAR_DATA            = LT_CHAR_DATA
         E_T_KYF_DATA             = LT_KEY_DATA
*         E_T_MSG                  =
*         E_T_TEXT_SYMBOLS         =
       EXCEPTIONS
         QUERY_NOT_ACTIVE         = 1
         CHAR_NOT_FOUND           = 2
         KYF_NOT_FOUND            = 3
         DATA_NOT_AVAILABLE       = 4
         OTHERS                   = 5
                .
      CLEAR: LT_VALUE,LS_VALUE,LT_TUPLE,LS_CHAR_DATA.
*    **获取关键日期对应行号
      READ TABLE LT_CHAR_DATA INTO LS_CHAR_DATA WITH KEY IOBJNM = LV_CHAR.
      IF SY-SUBRC = 0.
        LT_VALUE = LS_CHAR_DATA-IOBJ_VALUES.
        LOOP AT LT_VALUE INTO LS_VALUE WHERE  VALUE = LV_DATE.
          CLEAR LS_TUPLE.
          IF SY-SUBRC = 0.
            LS_TUPLE = LS_VALUE-TUPLE.
            APPEND LS_TUPLE TO LT_TUPLE.
          ENDIF.
        ENDLOOP.

        CLEAR:LS_TUPLE.
        LOOP AT LT_TUPLE INTO LS_TUPLE.
*    **根据行号所有维度对应数据
          CLEAR :LS_CHAR_DATA,LS_D001.
          LOOP AT LT_CHAR_DATA INTO LS_CHAR_DATA. "WHERE IOBJNM NE LV_CHAR.
            CLEAR: LT_VALUE,LS_VALUE.
            LT_VALUE = LS_CHAR_DATA-IOBJ_VALUES.
            SORT LT_VALUE BY TUPLE.
            READ TABLE LT_VALUE INTO LS_VALUE WITH KEY TUPLE =  LS_TUPLE-TUPLE BINARY SEARCH.
            IF SY-SUBRC = 0.
              CASE LS_CHAR_DATA-IOBJNM.
                 WHEN '0CALMONTH'.
                 LS_D001-CALMONTH = LS_VALUE-VALUE.
                 WHEN '0CALWEEK'.
                 LS_D001-CALWEEK = LS_VALUE-VALUE.
                 WHEN '0DATE__0CALMONTH'.
                 LS_D001-CALMONTH = LS_VALUE-VALUE.
                 WHEN '0DATE__0CALWEEK'.
                 LS_D001-CALWEEK = LS_VALUE-VALUE.
                 WHEN '0CALQUARTER'.
                 LS_D001-CALQUARTER = LS_VALUE-VALUE.
                 WHEN 'ZCRM_AREA'.
                 LS_D001-ZCRM_AREA = LS_VALUE-VALUE.
                 WHEN 'ZCOMP'.
                 LS_D001-ZCOMP = LS_VALUE-VALUE.
                 WHEN 'ZCOMP_S4'.
                 LS_D001-ZCOMP = LS_VALUE-VALUE.
                 WHEN '0COMP_CODE'.
                 LS_D001-ZCOMP = LS_VALUE-VALUE.
                 WHEN '0PLANT'.
                 LS_D001-PLANT = LS_VALUE-VALUE.
                 WHEN '0MATERIAL'.
                 LS_D001-ZCMAT_PLT = LS_VALUE-VALUE.
                 WHEN 'ZCMAT_PLT'.
                 LS_D001-ZCMAT_PLT = LS_VALUE-VALUE.
                 WHEN 'ZMAT_S4'.
                 LS_D001-ZCMAT_PLT = LS_VALUE-VALUE.
                 WHEN 'ZCVENDOR'.
                 LS_D001-ZCVENDOR = LS_VALUE-VALUE.
                 WHEN 'ZCORE_MTY'.
                 LS_D001-ZCORE_MTY = LS_VALUE-VALUE.
                 WHEN '4ZAGMMLCP008-CATEGORY'.
                 LS_D001-CATEGORY = LS_VALUE-VALUE.
                 WHEN '4ZAGMMLCP011-PALNTNAME'.
                 LS_D001-PALNTNAME = LS_VALUE-VALUE.

              "WHEN                          "根据需要字段扩充
              ENDCASE.

              ENDIF.

          ENDLOOP.

          LS_D001-QUERY = LS_QUERY-QUERY.
          LS_D001-TUPLE = LS_TUPLE-TUPLE.
          APPEND LS_D001 TO LT_D001.

*    **根据行号所有指标对应数据
          CLEAR LS_KEY_DATA.
          LOOP AT LT_KEY_DATA INTO LS_KEY_DATA .
            CLEAR: LT_VALUE,LS_VALUE,LS_DIR,LS_D005.
            LT_VALUE = LS_KEY_DATA-IOBJ_VALUES.
            SORT LT_VALUE BY TUPLE.
            READ TABLE LT_VALUE INTO LS_VALUE WITH KEY TUPLE =  LS_TUPLE-TUPLE BINARY SEARCH.
            IF SY-SUBRC = 0.
              LS_D005-QUERY = LS_QUERY-QUERY.
              LS_D005-TUPLE = LS_TUPLE-TUPLE.
              LS_D005-IOBJNM = LS_KEY_DATA-IOBJNM.
              LS_D005-VALUE = LS_VALUE-VALUE.
              READ TABLE LT_DIR INTO LS_DIR WITH KEY MAPNAME = LS_KEY_DATA-IOBJNM.
              IF SY-SUBRC = 0 .
                LS_D005-TXTLG = LS_DIR-TXTLG.

              ENDIF.
              APPEND LS_D005 TO LT_D005.

            ENDIF.
          ENDLOOP.

        ENDLOOP.
      ENDIF.
      CLEAR:LT_CHAR_LIST,LT_KEY_LIST,LV_CHAR , LV_DATE.
    ENDLOOP.
ENDFORM.

FORM MODIFY_DB.
    CLEAR:LS_D001,LT_FINAL.
    LOOP AT LT_D001 INTO LS_D001.
      CLEAR LS_D005.
      LOOP AT LT_D005 INTO LS_D005 WHERE QUERY = LS_D001-QUERY AND TUPLE = LS_D001-TUPLE.
        CLEAR LS_FINAL.

*          LS_FINAL-QUERY = LS_D001-QUERY.
*          LS_FINAL-TUPLE = LS_D001-TUPLE.
*          LS_FINAL-CALMONTH = LS_D001-CALMONTH.
*          LS_FINAL-CALWEEK = LS_D001-CALWEEK.
*          LS_FINAL-CALQUARTER = LS_D001-CALQUARTER.
*          LS_FINAL-ZCRM_AREA = LS_D001-ZCRM_AREA.
****维度
          LS_FINAL = CORRESPONDING #( LS_D001 ).
****指标
          LS_FINAL-IOBJNM = LS_D005-IOBJNM.
          LS_FINAL-TXTLG = LS_D005-TXTLG .
          LS_FINAL-VALUE = LS_D005-VALUE.
          LS_FINAL-TUPLE = ''.
          COLLECT LS_FINAL INTO LT_FINAL.
      ENDLOOP.

    ENDLOOP.
    IF LT_FINAL IS NOT INITIAL.
        DELETE FROM ZTBW_GRC_DATA.
    ENDIF.
    MODIFY ZTBW_GRC_DATA FROM TABLE LT_FINAL.
    COMMIT WORK AND WAIT.
ENDFORM.
